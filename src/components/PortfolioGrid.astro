---
export interface PortfolioItem {
  id: string;
  title: string;
  category: string[];
  image: string;
  slug: string;
  date: string;
  location?: string;
  client?: string;
}

export interface Props {
  items: PortfolioItem[];
  showFilters?: boolean;
}

const { items = [], showFilters = true } = Astro.props;
const allCategories = ['All', ...new Set(items.flatMap(item => item.category))];
---
<section class="section-padding" id="portfolio-section">
  <div class="container-custom">
    <div class="text-center mb-16">
      <h2 class="text-3xl sm:text-4xl lg:text-5xl font-serif mb-4">Our Portfolio</h2>
      <p class="text-lg text-brand-dark/80 dark:text-brand-light/80 max-w-3xl mx-auto">Explore our collection of weddings, portraits, and commercial work.</p>
    </div>

    {showFilters && (
      <div class="mb-12 flex flex-wrap justify-center gap-3 sm:gap-4" role="group" aria-label="Portfolio filters">
        {allCategories.map(category => (
          <button
            class="portfolio-filter px-4 py-2 sm:px-6 sm:py-3 rounded-2xl text-sm sm:text-base font-medium transition-all duration-300 border-2"
            data-filter={category.toLowerCase()}
          >
            {category}
          </button>
        ))}
      </div>
    )}

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 lg:gap-8" id="portfolio-grid">
      {items.map((item, index) => (
        <article class="portfolio-item group" data-categories={item.category.map(c => c.toLowerCase()).join(' ')}>
          <div class="card overflow-hidden h-full p-0">
            <a href={`/portfolio/${item.slug}`} class="block relative overflow-hidden aspect-[4/3]">
              <img
                src={`${item.image}?w=600&h=450&c_fill&q_auto&f_auto`}
                alt={item.title}
                class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                loading={index < 3 ? 'eager' : 'lazy'}
                decoding="async"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity"></div>
            </a>
            <div class="p-4 sm:p-6">
              <h3 class="text-lg sm:text-xl font-serif mb-2 line-clamp-2">{item.title}</h3>
              <div class="flex items-center justify-between text-sm text-brand-dark/70 dark:text-brand-light/70">
                <time datetime={item.date}>{new Date(item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short' })}</time>
                {item.client && <span class="font-medium">{item.client}</span>}
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</section>

<script>
  class PortfolioFilter {
    constructor() {
      this.filterButtons = document.querySelectorAll('.portfolio-filter');
      if (!this.filterButtons.length) return;
      
      this.portfolioItems = document.querySelectorAll('.portfolio-item');
      this.currentFilter = 'all';
      this.init();
    }

    init() {
      this.setActiveFilter('all');
      this.filterButtons.forEach(button => {
        button.addEventListener('click', (e) => this.handleFilterClick(e.target.dataset.filter));
      });
    }

    handleFilterClick(filter) {
      this.currentFilter = filter;
      this.setActiveFilter(filter);
      this.filterPortfolio(filter);
    }
    
    // === FIX: Updated color classes to use the new theme ===
    setActiveFilter(activeFilter) {
      this.filterButtons.forEach(button => {
        const isActive = button.dataset.filter === activeFilter;
        button.classList.toggle('bg-brand-dark', isActive);
        button.classList.toggle('text-white', isActive);
        button.classList.toggle('border-brand-dark', isActive);
        button.classList.toggle('bg-transparent', !isActive);
        button.classList.toggle('text-brand-dark', !isActive);
        button.classList.toggle('border-brand-tan', !isActive);
      });
    }

    filterPortfolio(filter) {
      this.portfolioItems.forEach(item => {
        const categories = item.dataset.categories;
        const shouldShow = filter === 'all' || categories.includes(filter);
        item.style.display = shouldShow ? 'block' : 'none';
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => new PortfolioFilter());
</script>

<style>
  /* === FIX: Replaced 'colors.royal.500' with 'colors.brand-dark' === */
  .portfolio-filter:focus-visible {
    outline: 2px solid theme('colors.brand-dark');
    outline-offset: 2px;
  }
</style>