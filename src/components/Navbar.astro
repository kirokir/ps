---
// Navigation links configuration
const navLinks = [
  { name: 'Home', href: '/', current: Astro.url.pathname === '/' },
  { name: 'Portfolio', href: '/portfolio', current: Astro.url.pathname.startsWith('/portfolio') },
  { name: 'About', href: '/about', current: Astro.url.pathname === '/about' },
  { name: 'Blog', href: '/blog', current: Astro.url.pathname.startsWith('/blog') },
  { name: 'FAQ', href: '/faq', current: Astro.url.pathname === '/faq' },
  { name: 'Contact', href: '/contact', current: Astro.url.pathname === '/contact' }
];
---

<header class="fixed top-0 w-full z-50 glass border-b border-white/20 transition-all duration-300" id="navbar">
  <div class="container-custom">
    <div class="flex items-center justify-between h-16 lg:h-20">
      
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a href="/" class="flex items-center space-x-2 group" aria-label="PhotoFirm Home">
          <div class="w-10 h-10 bg-gradient-to-br from-royal-500 to-gold-500 rounded-xl flex items-center justify-center transform group-hover:scale-110 transition-transform duration-200">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
          </div>
          <span class="text-xl font-serif font-semibold text-gray-900 dark:text-white">PhotoFirm</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-8" role="navigation" aria-label="Main navigation">
        {navLinks.map((link) => (
          <a
            href={link.href}
            class={`text-sm font-medium transition-colors duration-200 hover:text-royal-600 dark:hover:text-royal-400 ${
              link.current
                ? 'text-royal-600 dark:text-royal-400'
                : 'text-gray-700 dark:text-gray-300'
            }`}
            aria-current={link.current ? 'page' : undefined}
          >
            {link.name}
          </a>
        ))}
      </nav>

      <!-- Desktop Action Buttons -->
      <div class="hidden lg:flex items-center space-x-4">
        <!-- Dark mode toggle -->
        <button
          id="dark-mode-toggle"
          type="button"
          class="p-2 rounded-xl text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800 transition-colors duration-200"
          aria-label="Toggle dark mode"
        >
          <svg class="w-5 h-5 dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
          </svg>
          <svg class="w-5 h-5 hidden dark:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
          </svg>
        </button>

        <!-- CTA Button -->
        <a href="/contact" class="btn-primary">
          Book Session
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="lg:hidden">
        <button
          type="button"
          id="mobile-menu-button"
          class="p-2 rounded-xl text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800 transition-colors duration-200"
          aria-controls="mobile-menu"
          aria-expanded="false"
          aria-label="Toggle navigation menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div class="lg:hidden hidden" id="mobile-menu">
      <div class="px-2 pt-2 pb-3 space-y-1 glass-card mt-2 rounded-2xl border border-white/20">
        {navLinks.map((link) => (
          <a
            href={link.href}
            class={`block px-3 py-2 rounded-xl text-base font-medium transition-colors duration-200 ${
              link.current
                ? 'text-royal-600 bg-royal-50 dark:text-royal-400 dark:bg-royal-900/20'
                : 'text-gray-700 hover:text-royal-600 hover:bg-gray-50 dark:text-gray-300 dark:hover:text-royal-400 dark:hover:bg-gray-800/50'
            }`}
            aria-current={link.current ? 'page' : undefined}
          >
            {link.name}
          </a>
        ))}
        
        <!-- Mobile action buttons -->
        <div class="pt-4 border-t border-white/20">
          <div class="flex items-center justify-between">
            <button
              id="mobile-dark-mode-toggle"
              type="button"
              class="p-2 rounded-xl text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800 transition-colors duration-200"
              aria-label="Toggle dark mode"
            >
              <svg class="w-5 h-5 dark:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
              </svg>
              <svg class="w-5 h-5 hidden dark:block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
              </svg>
            </button>
            
            <a href="/contact" class="btn-primary">
              Book Session
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu functionality
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  let isMenuOpen = false;

  mobileMenuButton?.addEventListener('click', () => {
    isMenuOpen = !isMenuOpen;
    mobileMenu?.classList.toggle('hidden');
    mobileMenuButton.setAttribute('aria-expanded', isMenuOpen.toString());
  });

  // Dark mode toggle functionality
  const toggleDarkMode = () => {
    const isDark = document.documentElement.classList.contains('dark');
    document.documentElement.classList.toggle('dark');
    localStorage.setItem('darkMode', (!isDark).toString());
  };

  document.getElementById('dark-mode-toggle')?.addEventListener('click', toggleDarkMode);
  document.getElementById('mobile-dark-mode-toggle')?.addEventListener('click', toggleDarkMode);

  // Close mobile menu when clicking outside
  document.addEventListener('click', (event) => {
    if (isMenuOpen && !event.target.closest('#mobile-menu') && !event.target.closest('#mobile-menu-button')) {
      isMenuOpen = false;
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  });

  // Close mobile menu on escape key
  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape' && isMenuOpen) {
      isMenuOpen = false;
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  });

  // Navbar scroll effect
  let lastScrollTop = 0;
  const navbar = document.getElementById('navbar');

  window.addEventListener('scroll', () => {
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    
    // Add/remove backdrop blur based on scroll position
    if (scrollTop > 50) {
      navbar?.classList.add('backdrop-blur-md', 'bg-white/90', 'dark:bg-gray-900/90');
    } else {
      navbar?.classList.remove('backdrop-blur-md', 'bg-white/90', 'dark:bg-gray-900/90');
    }

    // Hide/show navbar on scroll
    if (scrollTop > lastScrollTop && scrollTop > 100) {
      // Scrolling down
      navbar?.classList.add('-translate-y-full');
    } else {
      // Scrolling up
      navbar?.classList.remove('-translate-y-full');
    }
    
    lastScrollTop = scrollTop;
  });
</script>